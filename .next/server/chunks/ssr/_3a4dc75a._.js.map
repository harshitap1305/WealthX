{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/avira/OneDrive/Desktop/WealthX/actions/account.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nconst serializeDecimal = (obj) => {\r\n  const serialized = { ...obj };\r\n  if (obj.balance) {\r\n    serialized.balance = obj.balance.toNumber();\r\n  }\r\n  if (obj.amount) {\r\n    serialized.amount = obj.amount.toNumber();\r\n  }\r\n  return serialized;\r\n};\r\n\r\nexport async function getAccountWithTransactions(accountId) {\r\n  const { userId } = await auth();\r\n  if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n  const user = await db.user.findUnique({\r\n    where: { clerkUserId: userId },\r\n  });\r\n\r\n  if (!user) throw new Error(\"User not found\");\r\n\r\n  const account = await db.account.findUnique({\r\n    where: {\r\n      id: accountId,\r\n      userId: user.id,\r\n    },\r\n    include: {\r\n      transactions: {\r\n        orderBy: { date: \"desc\" },\r\n      },\r\n      _count: {\r\n        select: { transactions: true },\r\n      },\r\n    },\r\n  });\r\n\r\n  if (!account) return null;\r\n\r\n  return {\r\n    ...serializeDecimal(account),\r\n    transactions: account.transactions.map(serializeDecimal),\r\n  };\r\n}\r\n\r\nexport async function bulkDeleteTransactions(transactionIds) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user) throw new Error(\"User not found\");\r\n\r\n    // Get transactions to calculate balance changes\r\n    const transactions = await db.transaction.findMany({\r\n      where: {\r\n        id: { in: transactionIds },\r\n        userId: user.id,\r\n      },\r\n    });\r\n\r\n    // Group transactions by account to update balances\r\n    const accountBalanceChanges = transactions.reduce((acc, transaction) => {\r\n      const change =\r\n        transaction.type === \"EXPENSE\"\r\n          ? transaction.amount\r\n          : -transaction.amount;\r\n      acc[transaction.accountId] = (acc[transaction.accountId] || 0) + change;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Delete transactions and update account balances in a transaction\r\n    await db.$transaction(async (tx) => {\r\n      // Delete transactions\r\n      await tx.transaction.deleteMany({\r\n        where: {\r\n          id: { in: transactionIds },\r\n          userId: user.id,\r\n        },\r\n      });\r\n\r\n      // Update account balances\r\n      for (const [accountId, balanceChange] of Object.entries(\r\n        accountBalanceChanges\r\n      )) {\r\n        await tx.account.update({\r\n          where: { id: accountId },\r\n          data: {\r\n            balance: {\r\n              increment: balanceChange,\r\n            },\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    revalidatePath(\"/dashboard\");\r\n    revalidatePath(\"/account/[id]\");\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    return { success: false, error: error.message };\r\n  }\r\n}\r\n\r\nexport async function updateDefaultAccount(accountId) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n\r\n    // First, unset any existing default account\r\n    await db.account.updateMany({\r\n      where: {\r\n        userId: user.id,\r\n        isDefault: true,\r\n      },\r\n      data: { isDefault: false },\r\n    });\r\n\r\n    // Then set the new default account\r\n    const account = await db.account.update({\r\n      where: {\r\n        id: accountId,\r\n        userId: user.id,\r\n      },\r\n      data: { isDefault: true },\r\n    });\r\n\r\n    revalidatePath(\"/dashboard\");\r\n    return { success: true, data: serializeTransaction(account) };\r\n  } catch (error) {\r\n    return { success: false, error: error.message };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/avira/OneDrive/Desktop/WealthX/app/%28main%29/account/_components/transaction-table.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TransactionTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call TransactionTable() from the server but TransactionTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/transaction-table.jsx <module evaluation>\",\n    \"TransactionTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,sFACA","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/avira/OneDrive/Desktop/WealthX/app/%28main%29/account/_components/transaction-table.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TransactionTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call TransactionTable() from the server but TransactionTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/transaction-table.jsx\",\n    \"TransactionTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,kEACA","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/avira/OneDrive/Desktop/WealthX/app/%28main%29/account/_components/account-chart.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AccountChart = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccountChart() from the server but AccountChart is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/account-chart.jsx <module evaluation>\",\n    \"AccountChart\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,kFACA","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/avira/OneDrive/Desktop/WealthX/app/%28main%29/account/_components/account-chart.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AccountChart = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccountChart() from the server but AccountChart is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/account-chart.jsx\",\n    \"AccountChart\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,8DACA","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/avira/OneDrive/Desktop/WealthX/app/%28main%29/account/%5Bid%5D/page.jsx"],"sourcesContent":["import { Suspense } from \"react\";\r\nimport { getAccountWithTransactions } from \"@/actions/account\";\r\nimport { BarLoader } from \"react-spinners\";\r\nimport { TransactionTable } from \"../_components/transaction-table\";\r\nimport { notFound } from \"next/navigation\";\r\nimport { AccountChart } from \"../_components/account-chart\";\r\n\r\nexport default async function AccountPage({ params: paramsPromise }) {\r\n  const params = await paramsPromise; \r\n  const accountData = await getAccountWithTransactions(params.id);\r\n\r\n  if (!accountData) {\r\n    notFound();\r\n  }\r\n\r\n  const { transactions, ...account } = accountData;\r\n\r\n  return (\r\n    <div className=\"space-y-8 px-5\">\r\n      <div className=\"flex gap-4 items-end justify-between\">\r\n        <div>\r\n          <h1 className=\"text-5xl sm:text-6xl font-bold tracking-tight gradient-title capitalize\">\r\n            {account.name}\r\n          </h1>\r\n          <p className=\"text-muted-foreground\">\r\n            {account.type.charAt(0) + account.type.slice(1).toLowerCase()}{\" \"}\r\n            Account\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"text-right pb-2\">\r\n          <div className=\"text-xl sm:text-2xl font-bold\">\r\n            ${parseFloat(account.balance).toFixed(2)}\r\n          </div>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {account._count.transactions} Transactions\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chart Section */}\r\n      <Suspense\r\n        fallback={<BarLoader className=\"mt-4\" width={\"100%\"} color=\"#9333ea\" />}\r\n      >\r\n        <AccountChart transactions={transactions} />\r\n      </Suspense>\r\n\r\n      {/* Transactions Table */}\r\n      <Suspense\r\n        fallback={<BarLoader className=\"mt-4\" width={\"100%\"} color=\"#9333ea\" />}\r\n      >\r\n        <TransactionTable transactions={transactions} />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;AAEe,eAAe,YAAY,EAAE,QAAQ,aAAa,EAAE;IACjE,MAAM,SAAS,MAAM;IACrB,MAAM,cAAc,MAAM,CAAA,GAAA,kHAAA,CAAA,6BAA0B,AAAD,EAAE,OAAO,EAAE;IAE9D,IAAI,CAAC,aAAa;QAChB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,MAAM,EAAE,YAAY,EAAE,GAAG,SAAS,GAAG;IAErC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC;gCAAG,WAAU;0CACX,QAAQ,IAAI;;;;;;0CAEf,8OAAC;gCAAE,WAAU;;oCACV,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,WAAW;oCAAI;oCAAI;;;;;;;;;;;;;kCAKvE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;oCAAgC;oCAC3C,WAAW,QAAQ,OAAO,EAAE,OAAO,CAAC;;;;;;;0CAExC,8OAAC;gCAAE,WAAU;;oCACV,QAAQ,MAAM,CAAC,YAAY;oCAAC;;;;;;;;;;;;;;;;;;;0BAMnC,8OAAC,qMAAA,CAAA,WAAQ;gBACP,wBAAU,8OAAC,6LAAA,CAAA,YAAS;oBAAC,WAAU;oBAAO,OAAO;oBAAQ,OAAM;;;;;;0BAE3D,cAAA,8OAAC,8JAAA,CAAA,eAAY;oBAAC,cAAc;;;;;;;;;;;0BAI9B,8OAAC,qMAAA,CAAA,WAAQ;gBACP,wBAAU,8OAAC,6LAAA,CAAA,YAAS;oBAAC,WAAU;oBAAO,OAAO;oBAAQ,OAAM;;;;;;0BAE3D,cAAA,8OAAC,kKAAA,CAAA,mBAAgB;oBAAC,cAAc;;;;;;;;;;;;;;;;;AAIxC","debugId":null}}]
}